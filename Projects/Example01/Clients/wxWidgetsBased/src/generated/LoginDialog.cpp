// -*- C++ -*- generated by wxGlade 0.6.2 on Wed Jan 02 16:19:18 2008
#include <ace/ACE.h>
#include "wxOgrePanel.h"
#include "LoginDialog.h"
#include "Avatar.h"
#include "Buffer.h"
#include "AuthPacket.h"
#include "AuthProtocol.h"
#include "AuthConnection_ClientSide.h"
#include "GameView.h"

LoginDialog::LoginDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: LoginDialog::LoginDialog
    m_txt_login = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    m_txt_passw = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PASSWORD);
    m_server_response = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize(120,200), wxTE_MULTILINE);
    m_btn_login = new wxButton(this, wxID_ANY, wxT("Login"));
    m_btn_cancel = new wxButton(this, wxID_CANCEL, wxEmptyString);
	m_world = new GameView(this,wxID_ANY);
	m_txt_login->Enable(false);
	m_txt_passw->Enable(false);
    Auth_Client_Connector cntr;
    Auth_Handler *hndlr=new Auth_Handler(this);
    cntr.connect(hndlr,ACE_INET_Addr(2106,"127.0.0.1"));
    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(LoginDialog, wxDialog)
    // begin wxGlade: LoginDialog::event_table
    EVT_TEXT_ENTER(wxID_ANY, LoginDialog::OnSetLogin)
    EVT_TEXT_ENTER(wxID_ANY, LoginDialog::OnSetPassword)
	//EVT_PAINT(LoginDialog::OnMyPaint)
    EVT_BUTTON(wxID_ANY, LoginDialog::OnLogin)
    // end wxGlade
END_EVENT_TABLE();


void LoginDialog::OnSetLogin(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (LoginDialog::OnSetLogin) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void LoginDialog::OnSetPassword(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (LoginDialog::OnSetPassword) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void LoginDialog::OnLogin(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (LoginDialog::OnLogin) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add LoginDialog event handlers


void LoginDialog::set_properties()
{
    // begin wxGlade: LoginDialog::set_properties
    SetTitle(wxT("Testing logging in"));
    m_btn_login->SetDefault();
    // end wxGlade
}


void LoginDialog::do_layout()
{
    // begin wxGlade: LoginDialog::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticText* label_1 = new wxStaticText(this, wxID_ANY, wxT("Login:"));
    sizer_2->Add(label_1, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_2->Add(m_txt_login, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_2->Add(20, 20, 1, 0, 0);
    wxStaticText* label_2 = new wxStaticText(this, wxID_ANY, wxT("Password:"));
    sizer_2->Add(label_2, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, 11);
    sizer_2->Add(m_txt_passw, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_1->Add(sizer_2, 0, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, 3);
    sizer_1->Add(m_server_response, 1, wxALL|wxEXPAND, 3);
	sizer_1->Add(m_world,1,wxALL|wxEXPAND, 3);
    sizer_3->Add(m_btn_login, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_3->Add(20, 20, 1, 0, 0);
    sizer_3->Add(m_btn_cancel, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_1->Add(sizer_3, 0, wxEXPAND, 0);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    Layout();
    // end wxGlade
}

void LoginDialog::OnMyPaint(wxPaintEvent &ev)
{
	ev.Skip();
	wxPaintDC m_dc(m_world);
	m_human1.draw_on(&m_dc,20,20);
}

void LoginDialog::notify_raw_data( char *dat,size_t sz )
{
	GrowingBuffer from((u8*)dat,sz,false);
	AuthSerializer srlz(true);
	AuthPacket *pkt=srlz.serializefrom(from);
	if(!pkt)
	{
		wxString raw_info = wxString::Format(wxT("Got raw data of size %d\n"),sz);
		(*m_server_response) << raw_info;
		return;
	}

	switch(pkt->GetPacketType())
	{
	case SMSG_AUTHVERSION:
		pktAuthVersion* vers_pkt = static_cast<pktAuthVersion*>(pkt);
		(*m_server_response) << wxString::Format(wxT("Server is working with version %d of authorization protocol"),
													vers_pkt->GetVersion()
												);
		u32 vp=vers_pkt->GetVersion();
		if(vers_pkt->GetVersion()==30206)
		{
			m_txt_login->Enable(true);
			m_txt_passw->Enable(true);
		}
		AuthPacketFactory::Destroy(pkt);
		break;

	}
}
void LoginDialog::notify_packet(pktAuthVersion* vers_pkt)
{
	(*m_server_response) << wxString::Format(wxT("Server is working with version %d of authorization protocol"),
		vers_pkt->GetVersion()
		);
	u32 vp=vers_pkt->GetVersion();
	if(vers_pkt->GetVersion()==30206)
	{
		m_txt_login->Enable(true);
		m_txt_passw->Enable(true);
	}
	AuthPacketFactory::Destroy(vers_pkt);
	m_endpoint->login("t1","t2");
}
void LoginDialog::notify_connected()
{
	(*m_server_response) << wxT("CONNECTED\n");
}

void LoginDialog::notify_disconnected()
{
	(*m_server_response) << wxT("DISCONNECTED\n");
}

void LoginDialog::notify_connection_created( AuthInterface *conn )
{
	m_endpoint=conn;
}
